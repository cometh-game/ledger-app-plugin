import "core-js/stable";
import "regenerator-runtime/runtime";
import { processTest, populateTransaction } from './test.fixture';

const contractName = "WelcomePackHelper";
const contractAddr = "0x6ee0fd8c477509b56c859d7dd213f92654379a35";
const testNetwork = "polygon";
const chainID = 137;
const testLabel = "Purchase Welcome Pack";  // <= Name of the test
const testDirSuffix = "welcome-pack"; // <= directory to compare device snapshots to
const signedPlugin = false;

const devices = [
  {
      name: "nanos",
      label: "Nano S",
      steps: 6 + 1, // <= Define the number of steps for this test case and this device
  },
  {
      name: "nanox",
      label: "Nano X",
      steps: 6, // <= Define the number of steps for this test case and this device
  },
  {
      name: "nanosp",
      label: "Nano S+",
      steps: 6, // <= Define the number of steps for this test case and this device
  },
];

// https://polygonscan.com/tx/0xcb80f0a261d9b534ac4ee50d9d2fa6bcc8debf785701bd942e230b20ff7ad4e8
const inputData = "0x28dec3950000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa8417400000000000000000000000000000000000000000000000000000000003ce1f0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000184c287347c000000000000000000000000000000000000000000000000000000000000001b95ac68f677454f4dfaebc58d99809f77138ec46bd2aa9a9c192cd74ae0bb18a92bdea219147a4c53a2b40bb1e7abd0969516d5bfb6a764828e3616888509c06900000000000000000000000000000000000000000000000000000000000001000000000000000000000000004d33b9c8a02ec9a892c98aa9561a3e743df1fea300000000000000000000000000000000000000000000000000000184c287476bd437e1529ac107c2fb377be95a876c48c01adf9897232e7988ec1439804d132a00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000041b4394f2a1a2eaf7e21460ef59370789cb1f4200000000000000000000000000000000000000000000005800af0709d34e59960000000000000000000000002b70b0ddb96e2581a311deb25a1424c7167e4a5300000000000000000000000000000000000000000000004268bbcb0a2f0a2a02000000000000000000000000000000000000000000000048ba70abe60810000a00000000000000000000000052fc543bd23d1948f11eb265eabdefbbb013157200000000000000000000000000000000000000000000001217a6403bce53c451000000000000000000000000f6351c1163314e95d025575c5cea314b055b7ed300000000000000000000000000000000000000000000000dcdc1bbe4e2f753e400000000000000000000000000000000000000000000000f07cf9afe0be8000a0000000000000000000000000000000000000000000000000000000000000041e66339befdccc838befd303d8db00d8bb7db5d58686ce1467376b1d282d7f78115807a30bcdd502b3eed8cd8addbf9e576f3ce927e956ff8b45d050e810b1b791c00000000000000000000000000000000000000000000000000000000000000";
const serializedTx = populateTransaction(contractAddr, inputData, chainID);

devices.forEach((device) => {
  processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork);
});
